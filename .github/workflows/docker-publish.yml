name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '27 3 * * *'
  push:
    branches: [ "master" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "master" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@7e0881f8fe90b25e305bbf0309761e9314607e25
        with:
          cosign-release: 'v1.9.0'


      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
      - name: Test
        run: |
          [ ! -x /usr/bin/docker ] && exit 1
          cd "$GITHUB_WORKSPACE"
          pwd
          ls -ld vpn.env.example
          sed -i '/ swan_ver_latest=/s/^/#/' run.sh
          sed -i \
            -e '/VPN_IPSEC_PSK/s/# //' \
            -e '/VPN_USER/s/# //' \
            -e '/VPN_PASSWORD/s/# //' \
            -e '/VPN_DNS_NAME/s/# //' \
            -e '/VPN_CLIENT_NAME/s/# //' \
            -e '/VPN_DNS_SRV1/s/# //' \
            -e '/VPN_DNS_SRV2/s/# //' vpn.env.example
          set -x
          if [ "$OS_TYPE" = "alpine" ]; then
            docker build -t vpn-test .
          elif [ "$OS_TYPE" = "debian" ]; then
            docker build -f Dockerfile.debian -t vpn-test .
          else
            exit 1
          fi
          if [ "$TEST_ID" = "with-env" ]; then
            docker run \
            --name "$TEST_ID" \
            --env-file ./vpn.env.example \
            --restart=always \
            -v ikev2-vpn-data:/etc/ipsec.d \
            -p 500:500/udp \
            -p 4500:4500/udp \
            -d --cap-add=NET_ADMIN \
            --device=/dev/ppp \
            --sysctl net.ipv4.ip_forward=1 \
            --sysctl net.ipv4.conf.all.accept_redirects=0 \
            --sysctl net.ipv4.conf.all.send_redirects=0 \
            --sysctl net.ipv4.conf.all.rp_filter=0 \
            --sysctl net.ipv4.conf.default.accept_redirects=0 \
            --sysctl net.ipv4.conf.default.send_redirects=0 \
            --sysctl net.ipv4.conf.default.rp_filter=0 \
            --sysctl net.ipv4.conf.eth0.send_redirects=0 \
            --sysctl net.ipv4.conf.eth0.rp_filter=0 \
            vpn-test
          elif [ "$TEST_ID" = "no-env" ]; then
            docker run \
            --name "$TEST_ID" \
            --restart=always \
            -p 500:500/udp \
            -p 4500:4500/udp \
            -d --privileged \
            vpn-test
          fi
          sleep 30
          docker ps | grep "$TEST_ID"
          docker logs "$TEST_ID"
          docker exec "$TEST_ID" netstat -anpu | grep pluto
          docker exec "$TEST_ID" netstat -anpu | grep xl2tpd
          docker exec "$TEST_ID" iptables -nvL
          docker exec "$TEST_ID" iptables -nvL | grep -q 'ppp+'
          docker exec "$TEST_ID" iptables -nvL | grep -q '192\.168\.43\.0/24'
          docker exec "$TEST_ID" iptables -nvL -t nat
          docker exec "$TEST_ID" iptables -nvL -t nat | grep -q '192\.168\.42\.0/24'
          docker exec "$TEST_ID" iptables -nvL -t nat | grep -q '192\.168\.43\.0/24'
          docker exec "$TEST_ID" ipsec status
          docker exec "$TEST_ID" ipsec status | grep -q l2tp-psk
          docker exec "$TEST_ID" ipsec status | grep -q xauth-psk
          if [ "$TEST_ID" = "with-env" ]; then
            source ./vpn.env.example
            docker exec "$TEST_ID" grep "$VPN_IPSEC_PSK" /etc/ipsec.secrets
            docker exec "$TEST_ID" grep "$VPN_USER" /etc/ppp/chap-secrets
            docker exec "$TEST_ID" grep "$VPN_PASSWORD" /etc/ppp/chap-secrets
            docker exec "$TEST_ID" grep "$VPN_USER" /etc/ipsec.d/passwd
            docker exec "$TEST_ID" ipsec status | grep -q ikev2-cp
            docker exec "$TEST_ID" grep "leftid=vpn.example.com" /etc/ipsec.conf
            docker exec "$TEST_ID" grep 'modecfgdns="1.1.1.1 1.0.0.1"' /etc/ipsec.conf
            docker exec "$TEST_ID" grep 'ms-dns 1.1.1.1' /etc/ppp/options.xl2tpd
            docker exec "$TEST_ID" grep 'ms-dns 1.0.0.1' /etc/ppp/options.xl2tpd
            docker exec "$TEST_ID" grep 'leftid=@vpn.example.com' /etc/ipsec.d/ikev2.conf
            docker exec "$TEST_ID" grep 'modecfgdns="1.1.1.1 1.0.0.1"' /etc/ipsec.d/ikev2.conf
            docker exec "$TEST_ID" ls -ld /etc/ipsec.d/your_client_name.mobileconfig
            docker exec "$TEST_ID" ls -ld /etc/ipsec.d/your_client_name.sswan
            docker exec "$TEST_ID" ls -ld /etc/ipsec.d/your_client_name.p12
            docker exec "$TEST_ID" grep 'vpn.example.com' /etc/ipsec.d/your_client_name.mobileconfig
            docker exec "$TEST_ID" grep 'vpn.example.com' /etc/ipsec.d/your_client_name.sswan
            docker exec "$TEST_ID" ikev2.sh --addclient vpnclient2
            docker exec "$TEST_ID" ls -ld /etc/ipsec.d/vpnclient2.mobileconfig
            docker exec "$TEST_ID" ls -ld /etc/ipsec.d/vpnclient2.sswan
            docker exec "$TEST_ID" ls -ld /etc/ipsec.d/vpnclient2.p12
            docker exec "$TEST_ID" rm -f /etc/ipsec.d/vpnclient2*
            docker exec "$TEST_ID" ikev2.sh --exportclient vpnclient2
            docker exec "$TEST_ID" ls -ld /etc/ipsec.d/vpnclient2.mobileconfig
            docker exec "$TEST_ID" ls -ld /etc/ipsec.d/vpnclient2.sswan
            docker exec "$TEST_ID" ls -ld /etc/ipsec.d/vpnclient2.p12
            docker exec "$TEST_ID" ikev2.sh --listclients
            echo "y" | docker exec -i "$TEST_ID" ikev2.sh --revokeclient vpnclient2
          else
            docker exec "$TEST_ID" ipsec status | grep -q ikev2-cp && exit 1
          fi
          docker restart "$TEST_ID"
          sleep 10
          docker ps | grep "$TEST_ID"
          docker logs "$TEST_ID"
          docker exec "$TEST_ID" netstat -anpu | grep pluto
          docker exec "$TEST_ID" netstat -anpu | grep xl2tpd
          docker exec "$TEST_ID" iptables -nvL
          docker exec "$TEST_ID" iptables -nvL | grep -q 'ppp+'
          docker exec "$TEST_ID" iptables -nvL | grep -q '192\.168\.43\.0/24'
          docker exec "$TEST_ID" iptables -nvL -t nat
          docker exec "$TEST_ID" iptables -nvL -t nat | grep -q '192\.168\.42\.0/24'
          docker exec "$TEST_ID" iptables -nvL -t nat | grep -q '192\.168\.43\.0/24'
          docker exec "$TEST_ID" ipsec status
          docker exec "$TEST_ID" ipsec status | grep -q l2tp-psk
          docker exec "$TEST_ID" ipsec status | grep -q xauth-psk
          if [ "$TEST_ID" = "with-env" ]; then
            docker exec "$TEST_ID" ipsec status | grep -q ikev2-cp
            echo "y" | docker exec -i "$TEST_ID" ikev2.sh --removeikev2
            sleep 3
          fi
          docker exec "$TEST_ID" ipsec status | grep -q ikev2-cp && exit 1
          exit 0
